{"version":3,"file":"static/js/47.08a8f9d9.chunk.js","mappings":"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","sources":["hooks/useForm.js","pages/NewPost/NewPost.js","components/FormElements/TagsInput/TagsInput.js","components/FormElements/BodyInput/BodyInput.js","components/FormElements/ImageUpload/ImageUpload.js","components/FormElements/Input/Input.js","utils/inputValidationRules.js","utils/formConfig.js"],"sourcesContent":["import { useState, useCallback } from 'react';\n\n//\"signupForm\" => \"formObj\" (name, email, password) => \"form\"\nconst useForm = (formObj) => {\n  const [form, setForm] = useState(formObj);\n\n  const renderFormInputs = () => {\n    //renders an [] of <Input> for all input fields\n    return Object.values(form).map((inputObj) => {\n      const { value, label, errorMessage, valid, renderInput } = inputObj;\n      return renderInput(\n        onInputChange,\n        value,\n        valid,\n        errorMessage,\n        label,\n        onCustomInputChange\n      );\n    });\n  };\n\n  const renderFormValues = () => {\n    let values = {};\n    Object.keys(form).forEach((inputObj) => {\n      values[inputObj] = form[inputObj].value;\n    });\n    return values;\n  };\n\n  const isInputFieldValid = useCallback(\n    (inputField) => {\n      for (const rule of inputField.validationRules) {\n        if (!rule.validate(inputField.value, form)) {\n          inputField.errorMessage = rule.message;\n          return false;\n        }\n      }\n      return true;\n    },\n    [form]\n  );\n\n  const onInputChange = useCallback(\n    (event) => {\n      const { name, value } = event.target;\n      let inputObj = { ...form[name], value };\n      const isValidInput = isInputFieldValid(inputObj);\n      if (isValidInput && !inputObj.valid) {\n        inputObj = { ...inputObj, valid: true };\n      } else if (!inputObj.touched && !isValidInput && inputObj.valid) {\n        inputObj = { ...inputObj, valid: false };\n      }\n      inputObj = { ...inputObj, touched: true };\n      setForm({ ...form, [name]: inputObj });\n    },\n    [form, isInputFieldValid]\n  );\n\n  const onCustomInputChange = useCallback(\n    (type, value, InputIsValid) => {\n      setForm({\n        ...form,\n        [type]: { ...form[type], value, valid: InputIsValid },\n      });\n    },\n    [form]\n  );\n\n  const isFormValid = useCallback(\n    (customForm) => {\n      let isValid = true;\n      const arr = Object.values(customForm || form);\n      for (let i = 0; i < arr.length; i++) {\n        if (!arr[i].valid) {\n          isValid = false;\n          break;\n        }\n      }\n      return isValid;\n    },\n    [form]\n  );\n\n  return {\n    renderFormInputs,\n    renderFormValues,\n    isFormValid,\n    setForm,\n  };\n};\n\nexport default useForm;\n","import React, { useContext } from 'react';\nimport { useHttpClient } from '../../hooks/useHttpClient';\nimport useForm from '../../hooks/useForm';\nimport { AuthContext } from '../../context/auth';\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom.min';\nimport { newPostForm } from '../../utils/formConfig';\nimport { appendData } from '../../utils';\nimport ErrorModal from '../../components/Modal/ErrorModal';\nimport LoadingSpinner from '../../components/LoadingSpinner/LoadingSpinner';\n\nconst NewPost = () => {\n  const auth = useContext(AuthContext);\n  const history = useHistory();\n  const { currentUser } = auth;\n  const { isLoading, sendReq, error, clearError } = useHttpClient();\n  const { renderFormInputs, renderFormValues, isFormValid } =\n    useForm(newPostForm);\n  const formValues = renderFormValues();\n  const formInputs = renderFormInputs();\n\n  const postSubmitHandle = async (evt) => {\n    evt.preventDefault(); //otherwise, there will be a reload\n    const formData = appendData(formValues);\n    formData.append('author', currentUser.userId);\n    try {\n      await sendReq(\n        `${process.env.REACT_APP_BASE_URL}/posts`,\n        'POST',\n        formData,\n        {\n          Authorization: `Bearer ${currentUser.token}`,\n        }\n      );\n      history.push('/');\n    } catch (err) {}\n  };\n\n  return (\n    <>\n      {isLoading && <LoadingSpinner asOverlay={true} />}\n      <ErrorModal error={error} onClose={clearError} />\n      {!isLoading && (\n        <div className='container-create-page'>\n          <form className='form form__create'>\n            <h2>Add a New Post</h2>\n            {formInputs}\n            <button\n              onClick={postSubmitHandle}\n              className='btn'\n              disabled={!isFormValid()}\n            >\n              Submit <span>&rarr;</span>\n            </button>\n          </form>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default NewPost;\n","import React, { useEffect, useState } from 'react';\nimport { GrFormClose } from '@react-icons/all-files/gr/GrFormClose';\nimport './TagsInput.css';\n\nexport const TagsInput = (props) => {\n  const [tags, setTags] = useState([]);\n  const [isValid, setIsValid] = useState(false);\n\n  const addTag = (evt) => {\n    const tag = evt.target.value;\n    if (evt.code === 'Enter' && tag !== '') {\n      setTags((tags) => [...tags, tag]);\n      evt.target.value = '';\n      let isInputValid = isValid;\n      if (tag !== '') {\n        setIsValid(true);\n        isInputValid = true;\n      } else {\n        setIsValid(false);\n        isInputValid = false;\n      }\n      props.onChange('tags', [...tags, tag], isInputValid);\n    }\n  };\n\n  useEffect(() => {\n    setTags(props.tags);\n  }, [props.tags, setTags]);\n\n  //just send the tags array and run onChange in both add and remove?\n\n  const removeTag = (indexToRemove) => {\n    const removedTag = tags[indexToRemove];\n    const updatedTags = tags.filter((tag) => tag !== removedTag);\n    setTags(updatedTags);\n    props.onChange('tags', updatedTags, true);\n  };\n\n  return (\n    <>\n      <h4>{props.label}</h4>\n      <div className='tags__input'>\n        <ul className='input__list'>\n          {tags &&\n            tags.map((tag, index) => (\n              <li className='input__item' key={index}>\n                <span>#{tag}</span>\n                <i className='input__remove'>\n                  <GrFormClose onClick={() => removeTag(index)} />\n                </i>\n              </li>\n            ))}\n        </ul>\n        <input\n          type='text'\n          placeholder='Press enter to add tags'\n          onKeyUp={addTag}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default TagsInput;\n","import React, { useEffect, useRef, useState } from 'react';\nimport SimpleMDE from 'react-simplemde-editor';\nimport 'easymde/dist/easymde.min.css';\n\nexport const BodyInput = (props) => {\n  const [value, setValue] = useState('');\n  const [isValid, setIsValid] = useState(false);\n\n  const valueRef = useRef();\n  valueRef.current = { value, isValid };\n\n  useEffect(() => {\n    setValue(props.value);\n  }, [props.value]);\n\n  const onChange = (value) => {\n    setValue(value);\n    if (valueRef.current.value !== '') {\n      setIsValid(true);\n    } else {\n      setIsValid(false);\n    }\n    props.onChange('body', value, valueRef.current.isValid);\n  };\n\n  return <SimpleMDE value={value} onChange={onChange} />;\n};\n","import React, { useRef, useState, useEffect } from 'react';\nimport './ImageUpload.css';\n\nconst ImageUpload = (props) => {\n  const [file, setFile] = useState();\n  const [previewURL, setPreviewURL] = useState();\n  const [isValid, setIsValid] = useState(false);\n  const filePickerRef = useRef();\n\n  useEffect(() => {\n    setFile(props.file);\n  }, [props.file]);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n    if (typeof file === 'string') {\n      setPreviewURL(`${file}`);\n    } else {\n      const fileReader = new FileReader();\n      fileReader.onload = () => {\n        setPreviewURL(fileReader.result);\n      };\n      fileReader.readAsDataURL(file);\n    }\n  }, [file]);\n  const pickedHandler = (e) => {\n    let pickedFile;\n    let fileIsValid = isValid;\n    if (e.target.files || e.target.files.length === 1) {\n      pickedFile = e.target.files[0];\n      setFile(pickedFile);\n      setIsValid(true);\n      fileIsValid = true;\n    } else {\n      setIsValid(false);\n      fileIsValid = false;\n    }\n    //file already being validated here\n    props.onInput(props.label.toLowerCase(), pickedFile, fileIsValid);\n  };\n  const pickImageHandler = () => {\n    filePickerRef.current.click();\n  };\n  return (\n    <div className='form__image'>\n      <input\n        id={props.id}\n        ref={filePickerRef}\n        style={{ display: 'none' }}\n        type='file'\n        accept='.jpg,.png,.jpeg'\n        onChange={pickedHandler}\n      />\n      <div className={`image-upload ${props.center && 'center'}`}>\n        <div className='image-upload__preview'>\n          {previewURL && <img src={previewURL} alt='preview' />}\n          {!previewURL && <p>Please pick an image</p>}\n        </div>\n        <button\n          type='button'\n          className='btn btn-upload'\n          onClick={pickImageHandler}\n        >\n          Choose image\n        </button>\n      </div>\n      {!isValid && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default ImageUpload;\n","import React from 'react';\nimport './Input.css';\n\nconst Input = (props) => {\n  const {\n    elementType,\n    label,\n    type,\n    name,\n    id,\n    rows,\n    handleChange,\n    // handleBlur,\n    errorMessage,\n    isValid,\n    value,\n    touched,\n  } = props;\n\n  const element =\n    elementType === 'input' ? (\n      <>\n        <input\n          className='form__input'\n          type={type}\n          name={name}\n          id={id}\n          key={label}\n          onChange={handleChange}\n          // onBlur={handleBlur}\n          value={value}\n        />\n      </>\n    ) : (\n      <textarea\n        label={label}\n        id={id}\n        type={type}\n        name={name}\n        className='form__textarea'\n        rows={rows || 3}\n        onChange={handleChange}\n        // onBlur={handleBlur}\n        value={value}\n      />\n    );\n  return (\n    <div className='form__group'>\n      <label htmlFor={name} className='form__label'>\n        {label}\n      </label>\n      {element}\n      {!touched && errorMessage && !isValid && (\n        <span className='input__error'>{errorMessage}</span>\n      )}\n    </div>\n  );\n};\n\nexport default Input;\n","/**\n * creates and returns a validation rule object that\n * is used by useForm hook to validate the form inputs\n *\n * @param {string} ruleName - name of the validation rule\n * @param {string} errorMessage - message to display\n * @param {function} validateFunc - validation function\n */\nfunction createValidationRule(ruleName, errorMessage, validateFunc) {\n  return {\n    name: ruleName,\n    message: errorMessage,\n    validate: validateFunc,\n  };\n}\n\nexport function requiredRule(inputName) {\n  return createValidationRule(\n    'required',\n    `${inputName} required`,\n    (inputValue, formObj) => inputValue.length !== 0\n  );\n}\n\nexport function minLengthRule(inputName, minCharacters) {\n  return createValidationRule(\n    'minLength',\n    `${inputName} should contain atleast ${minCharacters} characters`,\n    (inputValue, formObj) => inputValue.length >= minCharacters\n  );\n}\n\nexport function maxLengthRule(inputName, maxCharacters) {\n  return createValidationRule(\n    'minLength',\n    `${inputName} cannot contain more than ${maxCharacters} characters`,\n    (inputValue, formObj) => inputValue.length <= maxCharacters\n  );\n}\n\nexport function passwordMatchRule() {\n  return createValidationRule(\n    'passwordMatch',\n    `passwords do not match`,\n    (inputValue, formObj) => inputValue === formObj.password.value\n  );\n}\n","import TagsInput from '../components/FormElements/TagsInput/TagsInput';\nimport { BodyInput } from '../components/FormElements/BodyInput/BodyInput';\nimport ImageUpload from '../components/FormElements/ImageUpload/ImageUpload';\nimport Input from '../components/FormElements/Input/Input';\nimport {\n  maxLengthRule,\n  minLengthRule,\n  requiredRule,\n} from './inputValidationRules';\n\nconst createFormFieldConfig = (\n  label,\n  name,\n  type,\n  elementType = 'input',\n  defaultValue = ''\n) => {\n  //return an obj representing a single input\n  return {\n    //render a given input\n    renderInput: (\n      handleChange,\n      value,\n      isValid,\n      error,\n      key,\n      onCustomInputChange\n    ) => {\n      if (label === 'Image' || label === 'Avatar') {\n        return (\n          <ImageUpload\n            label={label}\n            key={label}\n            center\n            onInput={onCustomInputChange}\n            file={value}\n          />\n        );\n      }\n      if (label === 'Body') {\n        return (\n          <BodyInput key='Body' value={value} onChange={onCustomInputChange} />\n        );\n      }\n      if (label === 'Tags') {\n        return (\n          <TagsInput\n            key='Tags'\n            label={label}\n            tags={value}\n            onChange={onCustomInputChange}\n          />\n        );\n      }\n\n      return (\n        <>\n          <Input\n            key={label}\n            name={name}\n            type={type}\n            label={label}\n            elementType={elementType}\n            isValid={isValid}\n            value={value}\n            handleChange={handleChange}\n            // handleBlur={handleBlur}\n            errorMessage={error}\n          />\n        </>\n      );\n    },\n    label,\n    value: defaultValue,\n    valid: false,\n    errorMessage: '',\n    touched: false,\n  };\n};\n\n//object representation of signup form\n//the hook will use this obj to render the form\n//\"createFormFieldConfig\" takes in label, name, type\nexport const signupForm = {\n  name: {\n    ...createFormFieldConfig('Full Name', 'name', 'text'),\n    validationRules: [\n      requiredRule('name'),\n      minLengthRule('name', 3),\n      maxLengthRule('name', 25),\n    ],\n    key: '1',\n  },\n  email: {\n    ...createFormFieldConfig('Email', 'email', 'email'),\n    validationRules: [\n      requiredRule('email'),\n      minLengthRule('email', 10),\n      maxLengthRule('email', 25),\n    ],\n    key: '2',\n  },\n  password: {\n    ...createFormFieldConfig('Password', 'password', 'password'),\n    validationRules: [\n      requiredRule('password'),\n      minLengthRule('password', 6),\n      maxLengthRule('password', 20),\n    ],\n    key: '3',\n  },\n  avatar: {\n    ...createFormFieldConfig('Avatar', 'avatar', 'file'),\n    validationRules: [requiredRule('avatar')],\n    key: '1',\n  },\n};\n\n//create login form out of signup form\nconst createLoginForm = () => {\n  const form = {};\n  for (let [key, value] of Object.entries(signupForm)) {\n    if (key !== 'name' && key !== 'avatar') form[key] = value;\n  }\n  return form;\n};\n\n//object representation of login form\nexport const loginForm = createLoginForm();\n\nexport const newPostForm = {\n  title: {\n    ...createFormFieldConfig('Title', 'title', 'text'),\n    validationRules: [requiredRule('title')],\n  },\n  image: {\n    ...createFormFieldConfig('Image', 'image', 'file'),\n    validationRules: [requiredRule('image')],\n  },\n  imageAlt: {\n    ...createFormFieldConfig('Image Alt', 'imageAlt', 'text'),\n    validationRules: [requiredRule('Image Alt')],\n  },\n  // imageCredit: {\n  //   ...createFormFieldConfig(\"Image Credit\", \"imageCredit\", \"text\"),\n  //   validationRules: [requiredRule(\"Image Credit\")],\n  // },\n\n  body: {\n    ...createFormFieldConfig('Body', 'body', 'text'),\n    validationRules: [requiredRule('Body')],\n  },\n  topic: {\n    ...createFormFieldConfig('Topic', 'topic', 'text'),\n    validationRules: [requiredRule('Topic')],\n  },\n  tags: {\n    ...createFormFieldConfig('Tags', 'tags', 'text'),\n    validationRules: [requiredRule('Tags')],\n  },\n  titleURL: {\n    ...createFormFieldConfig('titleURL', 'titleURL', 'titleURL'),\n    validationRules: [requiredRule('titleURL')],\n  },\n};\n\nexport let editPostForm = {\n  title: {\n    ...createFormFieldConfig('Title', 'title', 'text'),\n    validationRules: [requiredRule('title')],\n  },\n  image: {\n    ...createFormFieldConfig('Image', 'image', 'file'),\n    validationRules: [requiredRule('image')],\n  },\n  imageAlt: {\n    ...createFormFieldConfig('Image Alt', 'imageAlt', 'text'),\n    validationRules: [requiredRule('Image Alt')],\n  },\n  // imageCredit: {\n  //   ...createFormFieldConfig(\"Image Credit\", \"imageCredit\", \"text\"),\n  //   validationRules: [requiredRule(\"Image Credit\")],\n  // },\n  body: {\n    ...createFormFieldConfig('Body', 'body', 'text'),\n    validationRules: [requiredRule('Body')],\n  },\n  topic: {\n    ...createFormFieldConfig('Topic', 'topic', 'text'),\n    validationRules: [requiredRule('Topic')],\n  },\n  tags: {\n    ...createFormFieldConfig('Tags', 'tags', 'text'),\n    validationRules: [requiredRule('Tags')],\n  },\n  titleURL: {\n    ...createFormFieldConfig('titleURL', 'titleURL', 'titleURL'),\n    validationRules: [requiredRule('titleURL')],\n  },\n};\n\nexport let editProfileForm = {\n  name: {\n    ...createFormFieldConfig('Name', 'name', 'text'),\n    validationRules: [requiredRule('name')],\n  },\n  avatar: {\n    ...createFormFieldConfig('Image', 'image', 'file'),\n    validationRules: [requiredRule('image')],\n  },\n  bio: {\n    ...createFormFieldConfig('Bio', 'bio', 'text'),\n    validationRules: [requiredRule('bio')],\n  },\n  links: {\n    ...createFormFieldConfig('Social Links', 'links', 'text'),\n    validationRules: [requiredRule('links')],\n  },\n  location: {\n    ...createFormFieldConfig('Location', 'location', 'text'),\n    validationRules: [requiredRule('location')],\n  },\n  work: {\n    ...createFormFieldConfig('Work', 'work', 'text'),\n    validationRules: [requiredRule('work')],\n  },\n  skills: {\n    ...createFormFieldConfig('Skills', 'skills', 'text'),\n    validationRules: [requiredRule('skills')],\n  },\n};\n\nexport const prefillEditPostForm = (data) => {\n  for (let [key, value] of Object.entries(data)) {\n    if (key in editPostForm) {\n      if (key === 'tags') {\n        let tags = [];\n        data[key].forEach((tag) => {\n          tags.push(tag.name);\n        });\n        editPostForm = {\n          ...editPostForm,\n          [key]: { ...editPostForm[key], value: tags, valid: true },\n        };\n      } else {\n        editPostForm = {\n          ...editPostForm,\n          [key]: { ...editPostForm[key], value, valid: true },\n        };\n      }\n    }\n  }\n};\n\nexport const prefillEditProfileForm = (data) => {\n  for (let [key, value] of Object.entries(data)) {\n    if (key in editProfileForm) {\n      editProfileForm = {\n        ...editProfileForm,\n        [key]: { ...editProfileForm[key], value, valid: true },\n      };\n    }\n  }\n};\n"],"names":["formObj","useState","form","setForm","isInputFieldValid","useCallback","inputField","validationRules","rule","validate","value","errorMessage","message","onInputChange","event","target","name","inputObj","isValidInput","valid","touched","onCustomInputChange","type","InputIsValid","renderFormInputs","Object","values","map","label","renderInput","renderFormValues","keys","forEach","isFormValid","customForm","isValid","arr","i","length","auth","useContext","AuthContext","history","useHistory","currentUser","useHttpClient","isLoading","sendReq","error","clearError","useForm","newPostForm","formValues","formInputs","postSubmitHandle","evt","preventDefault","formData","appendData","append","userId","process","Authorization","token","push","asOverlay","onClose","className","onClick","disabled","props","tags","setTags","setIsValid","useEffect","tag","index","GrFormClose","indexToRemove","removedTag","updatedTags","filter","onChange","removeTag","placeholder","onKeyUp","code","isInputValid","BodyInput","setValue","valueRef","useRef","current","file","setFile","previewURL","setPreviewURL","filePickerRef","fileReader","FileReader","onload","result","readAsDataURL","id","ref","style","display","accept","e","pickedFile","fileIsValid","files","onInput","toLowerCase","center","src","alt","click","errorText","elementType","rows","handleChange","element","htmlFor","createValidationRule","ruleName","validateFunc","requiredRule","inputName","inputValue","minLengthRule","minCharacters","maxLengthRule","maxCharacters","createFormFieldConfig","defaultValue","key","signupForm","email","password","avatar","loginForm","entries","createLoginForm","title","image","imageAlt","body","topic","titleURL","editPostForm","editProfileForm","bio","links","location","work","skills","prefillEditPostForm","data","prefillEditProfileForm"],"sourceRoot":""}