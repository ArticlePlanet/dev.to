{"version":3,"file":"static/js/112.f2840778.chunk.js","mappings":"+QAqCA,EAlCyB,SAAC,GAA4B,IAA1BA,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aACxBC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,QACRC,GAAYC,EAAAA,EAAAA,IAAWJ,EAAaK,MACpCC,EAAON,EAAaO,QAAUP,EAAaO,OAAOD,KACxD,MAAa,SAATP,GAEA,iCACE,iBAAKS,UAAU,cAAf,WACE,kBAAMA,UAAU,cAAhB,UAA+BF,EAA/B,uBACA,iBAAME,UAAU,aAAhB,SAA8BL,QAEhC,uBAAIF,GAAQA,EAAKQ,WAGH,YAATV,GAEP,iCACE,iBAAKS,UAAU,cAAf,WACE,kBAAMA,UAAU,cAAhB,UAA+BF,EAA/B,8BACA,iBAAME,UAAU,aAAhB,SAA8BL,QAEhC,6BAAKD,GAAWA,EAAQQ,KAAxB,WAKF,iBAAKF,UAAU,cAAf,WACE,kBAAMA,UAAU,cAAhB,UAA+BF,EAA/B,oBACA,iBAAME,UAAU,aAAhB,SAA8BL,QCVtC,EAjBqB,SAAC,GAAsC,IAApCH,EAAmC,EAAnCA,aAAmC,EAArBD,KAAqB,EAAfY,SAC1C,OACE,iBAAKH,UAAU,QAAf,WACE,SAACI,EAAA,EAAD,CACEC,IAAKb,EAAaO,QAAUP,EAAaO,OAAOO,OAChDC,KAAI,iBAAYf,EAAaO,OAAOS,OAEtC,gBAAKR,UAAU,iBAAf,UACE,SAAC,EAAD,CACET,KAAMC,EAAaiB,iBACnBjB,aAAcA,U,4BCyDxB,EA3DsB,SAAC,GAA+B,IAA7BkB,EAA4B,EAA5BA,KACfC,GAD2C,EAAtBC,iBACLC,EAAAA,EAAAA,YAAWC,EAAAA,GAA3BH,aACR,GAA0CI,EAAAA,EAAAA,UAAS,IAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KACA,GAAkDC,EAAAA,EAAAA,KAA1CC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,MAAOC,EAAnC,EAAmCA,YAEnCC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAkB,mCAAG,6GAEIJ,EAAQ,GAAD,OAC7BK,oCAD6B,kBACWd,EAAYe,OADvB,kBAEhC,MACA,KACA,CACEC,cAAc,UAAD,OAAYhB,EAAYiB,SAPlB,OAEjBC,EAFiB,OAUvBZ,EAAiBY,EAAab,eAVP,uGAAH,qDAaxBQ,MACC,CAACJ,EAAST,EAAYe,OAAQf,IAEjC,IAAMmB,GAAUC,EAAAA,EAAAA,MACRL,GAAWM,EAAAA,EAAAA,MAAXN,OAQR,OANAH,EAAAA,EAAAA,YAAU,WACJZ,GAAeA,EAAYe,SAAWA,GACxCI,EAAQG,KAAK,OAEd,CAACH,EAASnB,EAAae,KAGxB,gCACGP,IAAa,SAACe,EAAA,EAAD,CAAgBC,WAAW,KACzC,SAACC,EAAA,EAAD,CAAYf,MAAOA,EAAOgB,QAASf,KACjCH,IACA,gBAAKnB,UAAU,iCAAf,UACE,iCACE,eAAIA,UAAU,iBAAd,4BACA,gBAAKA,UAAU,gBAAf,SACGgB,GAAiBA,EAAcsB,OAAS,EACvCtB,EAAcuB,KAAI,SAAC/C,GAAD,OAChB,SAAC,EAAD,CAEEkB,KAAMA,EACNlB,aAAcA,GAFTA,EAAagB,QAMtB","sources":["components/Notification/NotificationBody.js","components/Notification/Notification.js","pages/Notifications/Notifications.js"],"sourcesContent":["import React from 'react';\nimport { formatDate } from '../../utils';\n\nconst NotificationBody = ({ type, notification }) => {\n  const { post, comment } = notification;\n  const createdAt = formatDate(notification.date);\n  const name = notification.sender && notification.sender.name;\n  if (type === 'like') {\n    return (\n      <>\n        <div className='notif__meta'>\n          <span className='meta__title'>{name} liked your post</span>\n          <span className='meta__time'>{createdAt}</span>\n        </div>\n        <p>{post && post.title}</p>\n      </>\n    );\n  } else if (type === 'comment') {\n    return (\n      <>\n        <div className='notif__meta'>\n          <span className='meta__title'>{name} commented on your post</span>\n          <span className='meta__time'>{createdAt}</span>\n        </div>\n        <p>\"{comment && comment.body}\"</p>\n      </>\n    );\n  } else {\n    return (\n      <div className='notif__meta'>\n        <span className='meta__title'>{name} followed you</span>\n        <span className='meta__time'>{createdAt}</span>\n      </div>\n    );\n  }\n};\n\nexport default NotificationBody;\n","import React from 'react';\nimport Avatar from '../Avatar/Avatar';\nimport NotificationBody from './NotificationBody';\n\nconst Notification = ({ notification, type, children }) => {\n  return (\n    <div className='notif'>\n      <Avatar\n        src={notification.sender && notification.sender.avatar}\n        link={`/users/${notification.sender.id}`}\n      />\n      <div className='notif__details'>\n        <NotificationBody\n          type={notification.notificationType}\n          notification={notification}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Notification;\n","import React, { useState, useEffect, useContext } from 'react';\nimport { useHttpClient } from '../../hooks/useHttpClient';\nimport { AuthContext } from '../../context/auth';\nimport Notification from '../../components/Notification/Notification';\nimport {\n  useHistory,\n  useParams,\n} from 'react-router-dom/cjs/react-router-dom.min';\nimport './Notifications.css';\nimport LoadingSpinner from '../../components/LoadingSpinner/LoadingSpinner';\nimport ErrorModal from '../../components/Modal/ErrorModal';\n\nconst Notifications = ({ user, userFollowStats }) => {\n  const { currentUser } = useContext(AuthContext);\n  const [notifications, setNotifications] = useState([]);\n  const { isLoading, sendReq, error, clearError } = useHttpClient();\n\n  useEffect(() => {\n    const fetchNotifications = async () => {\n      try {\n        const responseData = await sendReq(\n          `${process.env.REACT_APP_BASE_URL}/users/${currentUser.userId}/notifications`,\n          'GET',\n          null,\n          {\n            Authorization: `Bearer ${currentUser.token}`,\n          }\n        );\n        setNotifications(responseData.notifications);\n      } catch (err) {}\n    };\n    fetchNotifications();\n  }, [sendReq, currentUser.userId, currentUser]);\n\n  const history = useHistory();\n  const { userId } = useParams();\n\n  useEffect(() => {\n    if (currentUser && currentUser.userId !== userId) {\n      history.push('/');\n    }\n  }, [history, currentUser, userId]);\n\n  return (\n    <>\n      {isLoading && <LoadingSpinner asOverlay={true} />}\n      <ErrorModal error={error} onClose={clearError} />\n      {!isLoading && (\n        <div className='container container-notif-page'>\n          <>\n            <h3 className='notif__heading'>Notifications</h3>\n            <div className='notifications'>\n              {notifications && notifications.length > 0 ? (\n                notifications.map((notification) => (\n                  <Notification\n                    key={notification.id}\n                    user={user}\n                    notification={notification}\n                  />\n                ))\n              ) : (\n                <p>No notifications found!</p>\n              )}\n            </div>\n          </>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Notifications;\n"],"names":["type","notification","post","comment","createdAt","formatDate","date","name","sender","className","title","body","children","Avatar","src","avatar","link","id","notificationType","user","currentUser","userFollowStats","useContext","AuthContext","useState","notifications","setNotifications","useHttpClient","isLoading","sendReq","error","clearError","useEffect","fetchNotifications","process","userId","Authorization","token","responseData","history","useHistory","useParams","push","LoadingSpinner","asOverlay","ErrorModal","onClose","length","map"],"sourceRoot":""}