{"version":3,"file":"static/js/478.b2fab1c8.chunk.js","mappings":"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","sources":["hooks/useForm.js","components/Auth/GLogin.js","components/Auth/GHLogin.js","components/Auth/Welcome.js","components/Auth/FBLogin.js","components/Auth/TwitterLogin.js","pages/Auth/Auth.js","components/FormElements/TagsInput/TagsInput.js","components/FormElements/BodyInput/BodyInput.js","components/FormElements/ImageUpload/ImageUpload.js","components/FormElements/Input/Input.js","utils/inputValidationRules.js","utils/formConfig.js"],"sourcesContent":["import { useState, useCallback } from 'react';\n\n//\"signupForm\" => \"formObj\" (name, email, password) => \"form\"\nconst useForm = (formObj) => {\n  const [form, setForm] = useState(formObj);\n\n  const renderFormInputs = () => {\n    //renders an [] of <Input> for all input fields\n    return Object.values(form).map((inputObj) => {\n      const { value, label, errorMessage, valid, renderInput } = inputObj;\n      return renderInput(\n        onInputChange,\n        value,\n        valid,\n        errorMessage,\n        label,\n        onCustomInputChange\n      );\n    });\n  };\n\n  const renderFormValues = () => {\n    let values = {};\n    Object.keys(form).forEach((inputObj) => {\n      values[inputObj] = form[inputObj].value;\n    });\n    return values;\n  };\n\n  const isInputFieldValid = useCallback(\n    (inputField) => {\n      for (const rule of inputField.validationRules) {\n        if (!rule.validate(inputField.value, form)) {\n          inputField.errorMessage = rule.message;\n          return false;\n        }\n      }\n      return true;\n    },\n    [form]\n  );\n\n  const onInputChange = useCallback(\n    (event) => {\n      const { name, value } = event.target;\n      let inputObj = { ...form[name], value };\n      const isValidInput = isInputFieldValid(inputObj);\n      if (isValidInput && !inputObj.valid) {\n        inputObj = { ...inputObj, valid: true };\n      } else if (!inputObj.touched && !isValidInput && inputObj.valid) {\n        inputObj = { ...inputObj, valid: false };\n      }\n      inputObj = { ...inputObj, touched: true };\n      setForm({ ...form, [name]: inputObj });\n    },\n    [form, isInputFieldValid]\n  );\n\n  const onCustomInputChange = useCallback(\n    (type, value, InputIsValid) => {\n      setForm({\n        ...form,\n        [type]: { ...form[type], value, valid: InputIsValid },\n      });\n    },\n    [form]\n  );\n\n  const isFormValid = useCallback(\n    (customForm) => {\n      let isValid = true;\n      const arr = Object.values(customForm || form);\n      for (let i = 0; i < arr.length; i++) {\n        if (!arr[i].valid) {\n          isValid = false;\n          break;\n        }\n      }\n      return isValid;\n    },\n    [form]\n  );\n\n  return {\n    renderFormInputs,\n    renderFormValues,\n    isFormValid,\n    setForm,\n  };\n};\n\nexport default useForm;\n","import React, { useState } from 'react';\nimport { GoogleLogin } from 'react-google-login';\nimport { FcGoogle } from '@react-icons/all-files/fc/FcGoogle';\nimport useHttpClient from '../../hooks/useHttpClient';\n\nconst GLogin = (props) => {\n  const [showLoginButton, setShowLoginButton] = useState(true);\n  const { setError } = useHttpClient();\n\n  const onLoginSuccess = (res) => {\n    props.onLogin(res);\n    setShowLoginButton(false);\n  };\n\n  const onLoginFailure = (res) => {\n    setError('Login with Google failed. Please try again!', res);\n  };\n\n  return (\n    <div className='auth__google'>\n      {showLoginButton && (\n        <GoogleLogin\n          clientId={process.env.REACT_APP_GOOGLE_CLIENT_ID}\n          render={(renderProps) => (\n            <button\n              className='btn btn__social'\n              onClick={renderProps.onClick}\n              disabled={renderProps.disabled}\n            >\n              <i>\n                <FcGoogle />\n              </i>\n              <span>Continue with Google</span>\n            </button>\n          )}\n          buttonText='Login'\n          onSuccess={onLoginSuccess}\n          onFailure={onLoginFailure}\n          cookiePolicy={'single_host_origin'}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default GLogin;\n","import React from 'react';\nimport LoginGithub from 'react-login-github';\nimport { AiFillGithub } from '@react-icons/all-files/ai/AiFillGithub';\n\nconst GHLogin = (props) => {\n  const onSuccess = (res) => {\n    console.log(res);\n    props.onLogin(res);\n  };\n\n  const onFailure = (res) => {\n    console.log(res);\n  };\n\n  const buttonText = (\n    <>\n      <i>\n        <AiFillGithub />\n      </i>\n      <span>Continue with GitHub</span>\n    </>\n  );\n\n  return (\n    <LoginGithub\n      className='btn btn__social btn--gh'\n      buttonText={buttonText}\n      clientId={process.env.REACT_APP_GITHUB_CLIENT_ID}\n      onSuccess={onSuccess}\n      onFailure={onFailure}\n    />\n  );\n};\n\nexport default GHLogin;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Welcome = () => {\n  return (\n    <div className='welcome'>\n      <h2 className='welcome__title'>Welcome to DEV Community</h2>\n      <p className='welcome__slogan'>\n        <Link to='/'>DEV Community</Link> is a community of 748,239 amazing\n        developers\n      </p>\n    </div>\n  );\n};\n\nexport default Welcome;\n","import React from 'react';\nimport FacebookLogin from 'react-facebook-login/dist/facebook-login-render-props';\nimport { AiFillFacebook } from '@react-icons/all-files/ai/AiFillFacebook';\n\nconst FBLogin = (props) => {\n  const responseFacebook = async (response) => {\n    props.onLogin(response);\n  };\n\n  return (\n    <FacebookLogin\n      appId={process.env.REACT_APP_FB_APP_ID}\n      autoLoad={false}\n      callback={responseFacebook}\n      render={(renderProps) => (\n        <button\n          className='btn btn__social btn--fb'\n          onClick={renderProps.onClick}\n        >\n          <i>\n            <AiFillFacebook />\n          </i>\n          <span>Continue with Facebook</span>\n        </button>\n      )}\n    />\n  );\n};\n\nexport default FBLogin;\n","import React from 'react';\nimport { AiOutlineTwitter } from '@react-icons/all-files/ai/AiOutlineTwitter';\n\nconst TwitterLogin = (props) => {\n  const handleClick = async () => {\n    window.open(\n      `${process.env.REACT_APP_BASE_URL}/users/auth/twitter`,\n      '_self'\n    );\n  };\n  return (\n    <button className='btn btn__social btn--tw' onClick={handleClick}>\n      <i>\n        <AiOutlineTwitter />\n      </i>\n      Continue with Twitter\n    </button>\n  );\n};\n\nexport default TwitterLogin;\n","import React, { useContext, useEffect } from 'react';\nimport { useHistory, Link } from 'react-router-dom';\nimport { AuthContext } from '../../context/auth';\nimport { useHttpClient } from '../../hooks/useHttpClient';\nimport GLogin from '../../components/Auth/GLogin';\nimport GHLogin from '../../components/Auth/GHLogin';\nimport useForm from '../../hooks/useForm';\nimport { loginForm, signupForm } from '../../utils/formConfig';\nimport { appendData } from '../../utils';\nimport Welcome from '../../components/Auth/Welcome';\nimport './Auth.css';\nimport ErrorModal from '../../components/Modal/ErrorModal';\nimport FBLogin from '../../components/Auth/FBLogin';\nimport TwitterLogin from '../../components/Auth/TwitterLogin';\n\nconst Auth = ({ newUser }) => {\n  const { renderFormInputs, renderFormValues, isFormValid, setForm } =\n    useForm(signupForm);\n\n  useEffect(() => {\n    if (!newUser) {\n      setForm(loginForm);\n    } else {\n      setForm(signupForm);\n    }\n  }, [newUser, setForm]);\n\n  const formValues = renderFormValues();\n  const formInputs = renderFormInputs();\n\n  const { login } = useContext(AuthContext);\n  const history = useHistory();\n\n  const { sendReq, error, clearError } = useHttpClient();\n\n  //handle google auth\n  const handleGoogleAuth = async (googleData) => {\n    //getting tokenID from GLogin\n    const responseData = await sendReq(\n      `${process.env.REACT_APP_BASE_URL}/users/auth/google`,\n      'POST',\n      JSON.stringify({\n        tokenId: googleData.tokenId,\n      }),\n      {\n        'Content-Type': 'application/json', //inform backend the type of data being sent\n      }\n    );\n    let { user } = responseData;\n    user = { ...user, token: googleData.tokenId };\n    login(user); //log the user in\n    history.push('/');\n  };\n\n  const handleGithubAuth = async (githubData) => {\n    const { code } = githubData;\n    const responseData = await sendReq(\n      `${process.env.REACT_APP_BASE_URL}/users/auth/github`,\n      'POST',\n      JSON.stringify({ code }),\n      {\n        'Content-Type': 'application/json', //inform backend the type of data being sent\n      }\n    );\n    let { user } = responseData;\n    user = { ...user, token: githubData.code };\n    login(user); //log the user in\n    history.push('/');\n  };\n\n  const handleFBAuth = async (fbData) => {\n    const responseData = await sendReq(\n      `${process.env.REACT_APP_BASE_URL}/users/auth/facebook`,\n      'POST',\n      JSON.stringify({\n        accessToken: fbData.accessToken,\n        userId: fbData.userID,\n      }),\n      {\n        'Content-Type': 'application/json', //inform backend the type of data being sent\n      }\n    );\n    let { user } = responseData;\n    user = { ...user, token: fbData.accessToken };\n    login(user); //log the user in\n    history.push('/');\n  };\n\n  const handleAuthSubmit = async (evt) => {\n    evt.preventDefault();\n    try {\n      let responseData;\n      if (newUser) {\n        const formData = appendData(formValues);\n        responseData = await sendReq(\n          `${process.env.REACT_APP_BASE_URL}/users/signup`,\n          'POST',\n          formData\n        );\n      } else {\n        responseData = await sendReq(\n          `${process.env.REACT_APP_BASE_URL}/users/login`,\n          'POST',\n          JSON.stringify(formValues),\n          {\n            'Content-Type': 'application/json',\n          }\n        );\n      }\n      login(responseData.user);\n      history.push('/');\n    } catch (err) {}\n  };\n\n  return (\n    <>\n      <ErrorModal error={error} onClose={clearError} />\n      <div className='container container-auth'>\n        <Welcome />\n        <div className='auth__social'>\n          <GLogin onLogin={handleGoogleAuth} />\n          <GHLogin onLogin={handleGithubAuth} />\n          <FBLogin onLogin={handleFBAuth} />\n          <TwitterLogin />\n        </div>\n\n        <form className='form__auth'>\n          <div className='form__options'>\n            <p>Or</p>\n            <h2>\n              {newUser\n                ? 'Create a New Account'\n                : 'Log in using an Existing Account'}\n            </h2>\n            {formInputs}\n\n            <button\n              onClick={handleAuthSubmit}\n              className='btn btn__auth btn__auth--mode'\n              disabled={!isFormValid()}\n            >\n              {newUser ? 'Create account' : 'Login'}\n            </button>\n            <Link\n              className='btn btn__auth btn__auth--switch'\n              to={newUser ? '/auth' : '/auth/new-user'}\n            >\n              {newUser ? 'Login' : 'Create account'}\n            </Link>\n          </div>\n        </form>\n      </div>\n    </>\n  );\n};\n\nexport default Auth;\n","import React, { useEffect, useState } from 'react';\nimport { GrFormClose } from '@react-icons/all-files/gr/GrFormClose';\nimport './TagsInput.css';\n\nexport const TagsInput = (props) => {\n  const [tags, setTags] = useState([]);\n  const [isValid, setIsValid] = useState(false);\n\n  const addTag = (evt) => {\n    const tag = evt.target.value;\n    if (evt.code === 'Enter' && tag !== '') {\n      setTags((tags) => [...tags, tag]);\n      evt.target.value = '';\n      let isInputValid = isValid;\n      if (tag !== '') {\n        setIsValid(true);\n        isInputValid = true;\n      } else {\n        setIsValid(false);\n        isInputValid = false;\n      }\n      props.onChange('tags', [...tags, tag], isInputValid);\n    }\n  };\n\n  useEffect(() => {\n    setTags(props.tags);\n  }, [props.tags, setTags]);\n\n  //just send the tags array and run onChange in both add and remove?\n\n  const removeTag = (indexToRemove) => {\n    const removedTag = tags[indexToRemove];\n    const updatedTags = tags.filter((tag) => tag !== removedTag);\n    setTags(updatedTags);\n    props.onChange('tags', updatedTags, true);\n  };\n\n  return (\n    <>\n      <h4>{props.label}</h4>\n      <div className='tags__input'>\n        <ul className='input__list'>\n          {tags &&\n            tags.map((tag, index) => (\n              <li className='input__item' key={index}>\n                <span>#{tag}</span>\n                <i className='input__remove'>\n                  <GrFormClose onClick={() => removeTag(index)} />\n                </i>\n              </li>\n            ))}\n        </ul>\n        <input\n          type='text'\n          placeholder='Press enter to add tags'\n          onKeyUp={addTag}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default TagsInput;\n","import React, { useEffect, useRef, useState } from 'react';\nimport SimpleMDE from 'react-simplemde-editor';\nimport 'easymde/dist/easymde.min.css';\n\nexport const BodyInput = (props) => {\n  const [value, setValue] = useState('');\n  const [isValid, setIsValid] = useState(false);\n\n  const valueRef = useRef();\n  valueRef.current = { value, isValid };\n\n  useEffect(() => {\n    setValue(props.value);\n  }, [props.value]);\n\n  const onChange = (value) => {\n    setValue(value);\n    if (valueRef.current.value !== '') {\n      setIsValid(true);\n    } else {\n      setIsValid(false);\n    }\n    props.onChange('body', value, valueRef.current.isValid);\n  };\n\n  return <SimpleMDE value={value} onChange={onChange} />;\n};\n","import React, { useRef, useState, useEffect } from 'react';\nimport './ImageUpload.css';\n\nconst ImageUpload = (props) => {\n  const [file, setFile] = useState();\n  const [previewURL, setPreviewURL] = useState();\n  const [isValid, setIsValid] = useState(false);\n  const filePickerRef = useRef();\n\n  useEffect(() => {\n    setFile(props.file);\n  }, [props.file]);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n    if (typeof file === 'string') {\n      setPreviewURL(`${file}`);\n    } else {\n      const fileReader = new FileReader();\n      fileReader.onload = () => {\n        setPreviewURL(fileReader.result);\n      };\n      fileReader.readAsDataURL(file);\n    }\n  }, [file]);\n  const pickedHandler = (e) => {\n    let pickedFile;\n    let fileIsValid = isValid;\n    if (e.target.files || e.target.files.length === 1) {\n      pickedFile = e.target.files[0];\n      setFile(pickedFile);\n      setIsValid(true);\n      fileIsValid = true;\n    } else {\n      setIsValid(false);\n      fileIsValid = false;\n    }\n    //file already being validated here\n    props.onInput(props.label.toLowerCase(), pickedFile, fileIsValid);\n  };\n  const pickImageHandler = () => {\n    filePickerRef.current.click();\n  };\n  return (\n    <div className='form__image'>\n      <input\n        id={props.id}\n        ref={filePickerRef}\n        style={{ display: 'none' }}\n        type='file'\n        accept='.jpg,.png,.jpeg'\n        onChange={pickedHandler}\n      />\n      <div className={`image-upload ${props.center && 'center'}`}>\n        <div className='image-upload__preview'>\n          {previewURL && <img src={previewURL} alt='preview' />}\n          {!previewURL && <p>Please pick an image</p>}\n        </div>\n        <button\n          type='button'\n          className='btn btn-upload'\n          onClick={pickImageHandler}\n        >\n          Choose image\n        </button>\n      </div>\n      {!isValid && <p>{props.errorText}</p>}\n    </div>\n  );\n};\n\nexport default ImageUpload;\n","import React from 'react';\nimport './Input.css';\n\nconst Input = (props) => {\n  const {\n    elementType,\n    label,\n    type,\n    name,\n    id,\n    rows,\n    handleChange,\n    // handleBlur,\n    errorMessage,\n    isValid,\n    value,\n    touched,\n  } = props;\n\n  const element =\n    elementType === 'input' ? (\n      <>\n        <input\n          className='form__input'\n          type={type}\n          name={name}\n          id={id}\n          key={label}\n          onChange={handleChange}\n          // onBlur={handleBlur}\n          value={value}\n        />\n      </>\n    ) : (\n      <textarea\n        label={label}\n        id={id}\n        type={type}\n        name={name}\n        className='form__textarea'\n        rows={rows || 3}\n        onChange={handleChange}\n        // onBlur={handleBlur}\n        value={value}\n      />\n    );\n  return (\n    <div className='form__group'>\n      <label htmlFor={name} className='form__label'>\n        {label}\n      </label>\n      {element}\n      {!touched && errorMessage && !isValid && (\n        <span className='input__error'>{errorMessage}</span>\n      )}\n    </div>\n  );\n};\n\nexport default Input;\n","/**\n * creates and returns a validation rule object that\n * is used by useForm hook to validate the form inputs\n *\n * @param {string} ruleName - name of the validation rule\n * @param {string} errorMessage - message to display\n * @param {function} validateFunc - validation function\n */\nfunction createValidationRule(ruleName, errorMessage, validateFunc) {\n  return {\n    name: ruleName,\n    message: errorMessage,\n    validate: validateFunc,\n  };\n}\n\nexport function requiredRule(inputName) {\n  return createValidationRule(\n    'required',\n    `${inputName} required`,\n    (inputValue, formObj) => inputValue.length !== 0\n  );\n}\n\nexport function minLengthRule(inputName, minCharacters) {\n  return createValidationRule(\n    'minLength',\n    `${inputName} should contain atleast ${minCharacters} characters`,\n    (inputValue, formObj) => inputValue.length >= minCharacters\n  );\n}\n\nexport function maxLengthRule(inputName, maxCharacters) {\n  return createValidationRule(\n    'minLength',\n    `${inputName} cannot contain more than ${maxCharacters} characters`,\n    (inputValue, formObj) => inputValue.length <= maxCharacters\n  );\n}\n\nexport function passwordMatchRule() {\n  return createValidationRule(\n    'passwordMatch',\n    `passwords do not match`,\n    (inputValue, formObj) => inputValue === formObj.password.value\n  );\n}\n","import React from 'react';\nimport TagsInput from '../components/FormElements/TagsInput/TagsInput';\nimport { BodyInput } from '../components/FormElements/BodyInput/BodyInput';\nimport ImageUpload from '../components/FormElements/ImageUpload/ImageUpload';\nimport Input from '../components/FormElements/Input/Input';\nimport {\n  maxLengthRule,\n  minLengthRule,\n  requiredRule,\n} from './inputValidationRules';\n\nconst createFormFieldConfig = (\n  label,\n  name,\n  type,\n  elementType = 'input',\n  defaultValue = ''\n) => {\n  //return an obj representing a single input\n  return {\n    //render a given input\n    renderInput: (\n      handleChange,\n      value,\n      isValid,\n      error,\n      key,\n      onCustomInputChange\n    ) => {\n      if (label === 'Image' || label === 'Avatar') {\n        return (\n          <ImageUpload\n            label={label}\n            key={label}\n            center\n            onInput={onCustomInputChange}\n            file={value}\n          />\n        );\n      }\n      if (label === 'Body') {\n        return (\n          <BodyInput key='Body' value={value} onChange={onCustomInputChange} />\n        );\n      }\n      if (label === 'Tags') {\n        return (\n          <TagsInput\n            key='Tags'\n            label={label}\n            tags={value}\n            onChange={onCustomInputChange}\n          />\n        );\n      }\n\n      return (\n        <>\n          <Input\n            key={label}\n            name={name}\n            type={type}\n            label={label}\n            elementType={elementType}\n            isValid={isValid}\n            value={value}\n            handleChange={handleChange}\n            // handleBlur={handleBlur}\n            errorMessage={error}\n          />\n        </>\n      );\n    },\n    label,\n    value: defaultValue,\n    valid: false,\n    errorMessage: '',\n    touched: false,\n  };\n};\n\n//object representation of signup form\n//the hook will use this obj to render the form\n//\"createFormFieldConfig\" takes in label, name, type\nexport const signupForm = {\n  name: {\n    ...createFormFieldConfig('Full Name', 'name', 'text'),\n    validationRules: [\n      requiredRule('name'),\n      minLengthRule('name', 3),\n      maxLengthRule('name', 25),\n    ],\n    key: '1',\n  },\n  email: {\n    ...createFormFieldConfig('Email', 'email', 'email'),\n    validationRules: [\n      requiredRule('email'),\n      minLengthRule('email', 10),\n      maxLengthRule('email', 25),\n    ],\n    key: '2',\n  },\n  password: {\n    ...createFormFieldConfig('Password', 'password', 'password'),\n    validationRules: [\n      requiredRule('password'),\n      minLengthRule('password', 6),\n      maxLengthRule('password', 20),\n    ],\n    key: '3',\n  },\n  avatar: {\n    ...createFormFieldConfig('Avatar', 'avatar', 'file'),\n    validationRules: [requiredRule('avatar')],\n    key: '1',\n  },\n};\n\n//create login form out of signup form\nconst createLoginForm = () => {\n  const form = {};\n  for (let [key, value] of Object.entries(signupForm)) {\n    if (key !== 'name' && key !== 'avatar') form[key] = value;\n  }\n  return form;\n};\n\n//object representation of login form\nexport const loginForm = createLoginForm();\n\nexport const newPostForm = {\n  title: {\n    ...createFormFieldConfig('Title', 'title', 'text'),\n    validationRules: [requiredRule('title')],\n  },\n  image: {\n    ...createFormFieldConfig('Image', 'image', 'file'),\n    validationRules: [requiredRule('image')],\n  },\n  imageAlt: {\n    ...createFormFieldConfig('Image Alt', 'imageAlt', 'text'),\n    validationRules: [requiredRule('Image Alt')],\n  },\n  // imageCredit: {\n  //   ...createFormFieldConfig(\"Image Credit\", \"imageCredit\", \"text\"),\n  //   validationRules: [requiredRule(\"Image Credit\")],\n  // },\n\n  body: {\n    ...createFormFieldConfig('Body', 'body', 'text'),\n    validationRules: [requiredRule('Body')],\n  },\n  topic: {\n    ...createFormFieldConfig('Topic', 'topic', 'text'),\n    validationRules: [requiredRule('Topic')],\n  },\n  tags: {\n    ...createFormFieldConfig('Tags', 'tags', 'text'),\n    validationRules: [requiredRule('Tags')],\n  },\n  titleURL: {\n    ...createFormFieldConfig('titleURL', 'titleURL', 'titleURL'),\n    validationRules: [requiredRule('titleURL')],\n  },\n};\n\nexport let editPostForm = {\n  title: {\n    ...createFormFieldConfig('Title', 'title', 'text'),\n    validationRules: [requiredRule('title')],\n  },\n  image: {\n    ...createFormFieldConfig('Image', 'image', 'file'),\n    validationRules: [requiredRule('image')],\n  },\n  imageAlt: {\n    ...createFormFieldConfig('Image Alt', 'imageAlt', 'text'),\n    validationRules: [requiredRule('Image Alt')],\n  },\n  // imageCredit: {\n  //   ...createFormFieldConfig(\"Image Credit\", \"imageCredit\", \"text\"),\n  //   validationRules: [requiredRule(\"Image Credit\")],\n  // },\n  body: {\n    ...createFormFieldConfig('Body', 'body', 'text'),\n    validationRules: [requiredRule('Body')],\n  },\n  topic: {\n    ...createFormFieldConfig('Topic', 'topic', 'text'),\n    validationRules: [requiredRule('Topic')],\n  },\n  tags: {\n    ...createFormFieldConfig('Tags', 'tags', 'text'),\n    validationRules: [requiredRule('Tags')],\n  },\n  titleURL: {\n    ...createFormFieldConfig('titleURL', 'titleURL', 'titleURL'),\n    validationRules: [requiredRule('titleURL')],\n  },\n};\n\nexport let editProfileForm = {\n  name: {\n    ...createFormFieldConfig('Name', 'name', 'text'),\n    validationRules: [requiredRule('name')],\n  },\n  avatar: {\n    ...createFormFieldConfig('Image', 'image', 'file'),\n    validationRules: [requiredRule('image')],\n  },\n  bio: {\n    ...createFormFieldConfig('Bio', 'bio', 'text'),\n    validationRules: [requiredRule('bio')],\n  },\n  links: {\n    ...createFormFieldConfig('Social Links', 'links', 'text'),\n    validationRules: [requiredRule('links')],\n  },\n  location: {\n    ...createFormFieldConfig('Location', 'location', 'text'),\n    validationRules: [requiredRule('location')],\n  },\n  work: {\n    ...createFormFieldConfig('Work', 'work', 'text'),\n    validationRules: [requiredRule('work')],\n  },\n  skills: {\n    ...createFormFieldConfig('Skills', 'skills', 'text'),\n    validationRules: [requiredRule('skills')],\n  },\n};\n\nexport const prefillEditPostForm = (data) => {\n  for (let [key, value] of Object.entries(data)) {\n    if (key in editPostForm) {\n      if (key === 'tags') {\n        let tags = [];\n        data[key].forEach((tag) => {\n          tags.push(tag.name);\n        });\n        editPostForm = {\n          ...editPostForm,\n          [key]: { ...editPostForm[key], value: tags, valid: true },\n        };\n      } else {\n        editPostForm = {\n          ...editPostForm,\n          [key]: { ...editPostForm[key], value, valid: true },\n        };\n      }\n    }\n  }\n};\n\nexport const prefillEditProfileForm = (data) => {\n  for (let [key, value] of Object.entries(data)) {\n    if (key in editProfileForm) {\n      editProfileForm = {\n        ...editProfileForm,\n        [key]: { ...editProfileForm[key], value, valid: true },\n      };\n    }\n  }\n};\n"],"names":["formObj","useState","form","setForm","isInputFieldValid","useCallback","inputField","validationRules","rule","validate","value","errorMessage","message","onInputChange","event","target","name","inputObj","isValidInput","valid","touched","onCustomInputChange","type","InputIsValid","renderFormInputs","Object","values","map","label","renderInput","renderFormValues","keys","forEach","isFormValid","customForm","isValid","arr","i","length","props","showLoginButton","setShowLoginButton","setError","useHttpClient","className","GoogleLogin","clientId","process","render","renderProps","onClick","disabled","FcGoogle","buttonText","onSuccess","res","onLogin","onFailure","cookiePolicy","AiFillGithub","console","log","to","responseFacebook","response","appId","autoLoad","callback","AiFillFacebook","handleClick","window","open","AiOutlineTwitter","newUser","useForm","signupForm","useEffect","loginForm","formValues","formInputs","login","useContext","AuthContext","history","useHistory","sendReq","error","clearError","handleGoogleAuth","googleData","JSON","stringify","tokenId","responseData","user","token","push","handleGithubAuth","githubData","code","handleFBAuth","fbData","accessToken","userId","userID","handleAuthSubmit","evt","preventDefault","formData","appendData","ErrorModal","onClose","tags","setTags","setIsValid","tag","index","GrFormClose","indexToRemove","removedTag","updatedTags","filter","onChange","removeTag","placeholder","onKeyUp","isInputValid","BodyInput","setValue","valueRef","useRef","current","file","setFile","previewURL","setPreviewURL","filePickerRef","fileReader","FileReader","onload","result","readAsDataURL","id","ref","style","display","accept","e","pickedFile","fileIsValid","files","onInput","toLowerCase","center","src","alt","click","errorText","elementType","rows","handleChange","element","htmlFor","createValidationRule","ruleName","validateFunc","requiredRule","inputName","inputValue","minLengthRule","minCharacters","maxLengthRule","maxCharacters","createFormFieldConfig","defaultValue","key","email","password","avatar","entries","createLoginForm","newPostForm","title","image","imageAlt","body","topic","titleURL","editPostForm","editProfileForm","bio","links","location","work","skills","prefillEditPostForm","data","prefillEditProfileForm"],"sourceRoot":""}